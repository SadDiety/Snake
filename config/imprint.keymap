#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    macros {
        Screenshot: Screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_SHIFT &kp LG(S)>, <&macro_press>;

            label = "SCREENSHOT";
        };
    };

    behaviors {
        LayerSwtch3: LayerSwtch3 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYERSWTCH3";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&to 1>;
        };

        LayerSwitch8: LayerSwitch8 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYERSWITCH8";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&to 1>;
        };

        LayerF3: LayerF3 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYERF3";
            #binding-cells = <0>;
            bindings = <&kp F3>, <&to 0>;
        };

        LayerF8: LayerF8 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYERF8";
            #binding-cells = <0>;
            bindings = <&kp F8>, <&to 0>;
        };

        shift_shiftwin: shift_shiftwin {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_SHIFTWIN";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp LG(LEFT_SHIFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none       &none       &none     &none         &none       &none                             &none       &none            &none              &none             &none              &none
&kp EQUAL   &kp N1      &kp N2    &LayerSwtch3  &kp N4      &kp N5                            &kp N6      &kp N7           &LayerSwitch8      &kp N9            &kp N0             &kp MINUS
&kp TAB     &kp Q       &kp W     &kp F         &kp P       &kp B                             &kp J       &kp L            &kp U              &kp Y             &kp SEMICOLON      &kp BSLH
&kp DELETE  &kp A       &kp R     &kp S         &kp T       &kp G                             &kp M       &kp N            &kp E              &kp I             &kp O              &to 1
&kp SQT     &kp Z       &kp X     &kp C         &kp D       &kp V                             &kp K       &kp H            &kp COMMA          &kp DOT           &kp FSLH           &kp RSHFT
&kp GRAVE   &caps_word  &kp CLCK  &kp LEFT      &kp RIGHT                                                 &kp UP           &kp DOWN           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &Screenshot
                                                &kp ESCAPE  &kp LEFT_WIN   &kp LEFT_ALT       &mkp LCLK   &mkp RCLK        &kp RIGHT_CONTROL
                                                &kp SPACE   &kp BACKSPACE  &shift_shiftwin    &caps_word  &kp RIGHT_SHIFT  &kp ENTER
            >;
        };

        Numpad_Nav_Layer {
            bindings = <
&trans          &trans       &trans        &trans            &trans             &trans                            &trans      &trans           &trans             &trans      &trans         &trans
&kp ESCAPE      &kp F1       &LayerF3      &kp F3            &kp F4             &kp F5                            &kp F6      &kp F7           &LayerF8           &kp F9      &kp F10        &kp F11
&kp TAB         &kp EXCL     &kp PLUS      &kp LC(V)         &kp LC(X)          &kp ASTERISK                      &kp SLASH   &kp N7           &kp N8             &kp N9      &kp MINUS      &kp F12
&kp DELETE      &kp AT       &kp LC(Z)     &kp RG(V)         &kp LC(C)          &kp PIPE                          &kp PERIOD  &kp N4           &kp N5             &kp N6      &kp N0         &to 0
&kp LEFT_SHIFT  &kp PERCENT  &kp HASH      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp TILDE                         &kp COLON   &kp N1           &kp N2             &kp N3      &kp BACKSLASH  &kp AMPERSAND
&to 0           &kp COMMA    &kp CAPSLOCK  &kp LEFT          &kp RIGHT                                                        &kp UP           &kp DOWN           &kp DOLLAR  &kp EQUAL      &Screenshot
                                                             &kp ESCAPE         &kp LEFT_WIN   &kp LEFT_ALT       &mkp LCLK   &mkp RCLK        &kp RIGHT_CONTROL
                                                             &kp SPACE          &kp BACKSPACE  &shift_shiftwin    &to 0       &kp RIGHT_SHIFT  &kp ENTER
            >;
        };

        Keyboard_Control_Layer {
            bindings = <
&trans       &trans        &trans        &trans        &trans        &trans                  &trans           &trans           &trans           &trans           &trans           &trans
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans           &trans
&sys_reset   &trans        &trans        &trans        &trans        &trans                  &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &sys_reset
&bootloader  &trans        &trans        &trans        &trans        &trans                  &trans           &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &bootloader
&to 4        &trans        &trans        &trans        &trans        &trans                  &trans           &trans           &trans           &trans           &trans           &to 4
&to 4        &trans        &trans        &trans        &trans                                                 &trans           &trans           &trans           &trans           &to 4
                                                       &trans        &trans        &trans    &trans           &trans           &trans
                                                       &trans        &trans        &trans    &trans           &trans           &trans
            >;
        };

        Auto_Mouse_Layer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans                               &trans  &trans  &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };

        factory_test {
            bindings = <
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1
&kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7            &kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3
&kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9            &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1            &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7
&kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3            &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4                            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
                                &kp N1  &kp N2  &kp N3    &kp N4  &kp N5  &kp N6
                                &kp N7  &kp N8  &kp N9    &kp N0  &kp N1  &kp N2
            >;
        };
    };
};

// right hand trackball configuration
// &trackball_peripheral_listener {
//    input-processors =
//     activate layer 3 within 500ms of the trackball moving
//     <&zip_temp_layer 3 500>;
// };
//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),,,,,,,,,,,,,
        <&zip_xy_scaler 1 3>,
        // make this trackball output scrolling events by default instead of cursor movement,,,,,,,,,,,,,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,,,,,,,,,,,,,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};
