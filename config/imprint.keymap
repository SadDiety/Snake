#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    macros {
        Screenshot: Screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_SHIFT &kp LG(S)>, <&macro_press>;

            label = "SCREENSHOT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none       &none       &none     &none     &none           &none                              &none      &none              &none            &none             &none              &none
&kp EQUAL   &kp N1      &kp N2    &kp N3    &kp N4          &kp N5                             &kp N6     &kp N7             &kp N8           &kp N9            &kp N0             &kp MINUS
&kp TAB     &kp Q       &kp W     &kp F     &kp P           &kp B                              &kp J      &kp L              &kp U            &kp Y             &kp SEMICOLON      &kp BSLH
&kp DELETE  &kp A       &kp R     &kp S     &kp T           &kp G                              &kp M      &kp N              &kp E            &kp I             &kp O              &caps_word
&kp SQT     &kp Z       &kp X     &kp C     &kp D           &kp V                              &kp K      &kp H              &kp COMMA        &kp DOT           &kp FSLH           &kp RSHFT
&kp GRAVE   &caps_word  &kp CLCK  &kp LEFT  &kp RIGHT                                                     &kp UP             &kp DOWN         &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &Screenshot
                                            &kp LEFT_SHIFT  &kp LEFT_WIN   &kp ESC             &mkp RCLK  &mkp LCLK          &kp ENTER
                                            &kp SPACE       &kp BACKSPACE  &kp LEFT_CONTROL    &to 1      &kp RIGHT_CONTROL  &kp RIGHT_SHIFT
            >;
        };

        Numpad_Nav_Layer {
            bindings = <
&trans          &trans       &trans        &trans            &trans             &trans                                &trans      &trans             &trans           &trans      &trans         &trans
&kp ESCAPE      &kp F1       &kp F2        &kp F3            &kp F4             &kp F5                                &kp F6      &kp F7             &kp F8           &kp F9      &kp F10        &kp F11
&kp TAB         &kp EXCL     &kp PLUS      &kp LC(V)         &kp LC(X)          &kp ASTERISK                          &kp SLASH   &kp N7             &kp N8           &kp N9      &kp AMPERSAND  &kp F12
&kp DELETE      &kp AT       &kp LC(Z)     &kp RG(V)         &kp LC(C)          &kp PIPE                              &kp PERIOD  &kp N4             &kp N5           &kp N6      &kp N0         &kp MINUS
&kp LEFT_SHIFT  &kp PERCENT  &kp HASH      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp TILDE                             &kp COLON   &kp N1             &kp N2           &kp N3      &kp BACKSLASH  &to 0
&to 0           &kp COMMA    &kp CAPSLOCK  &kp LEFT          &kp RIGHT                                                            &kp UP             &kp UP           &kp DOLLAR  &kp EQUAL      &Screenshot
                                                             &kp SPACE          &kp BACKSPACE     &kp ESCAPE          &mkp RCLK   &mkp LCLK          &kp ENTER
                                                             &kp LEFT_SHIFT     &kp LEFT_CONTROL  &kp LA(LEFT_WIN)    &to 0       &kp RIGHT_CONTROL  &kp RIGHT_SHIFT
            >;
        };

        Keyboard_Control_Layer {
            bindings = <
&trans       &trans        &trans        &trans        &trans        &trans                  &trans           &trans           &trans           &trans           &trans           &trans
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans           &trans
&sys_reset   &trans        &trans        &trans        &trans        &trans                  &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &sys_reset
&bootloader  &trans        &trans        &trans        &trans        &trans                  &trans           &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &bootloader
&to 4        &trans        &trans        &trans        &trans        &trans                  &trans           &trans           &trans           &trans           &trans           &to 4
&to 4        &trans        &trans        &trans        &trans                                                 &trans           &trans           &trans           &trans           &to 4
                                                       &trans        &trans        &trans    &trans           &trans           &trans
                                                       &trans        &trans        &trans    &trans           &trans           &trans
            >;
        };

        Auto_Mouse_Layer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans                               &trans  &trans  &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
                                      &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };

        factory_test {
            bindings = <
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1
&kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7            &kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3
&kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9            &kp N0  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp N1            &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7
&kp N8  &kp N9  &kp N0  &kp N1  &kp N2  &kp N3            &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
&kp N0  &kp N1  &kp N2  &kp N3  &kp N4                            &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
                                &kp N1  &kp N2  &kp N3    &kp N4  &kp N5  &kp N6
                                &kp N7  &kp N8  &kp N9    &kp N0  &kp N1  &kp N2
            >;
        };
    };
};

// right hand trackball configuration
// &trackball_peripheral_listener {
//    input-processors =
//     activate layer 3 within 500ms of the trackball moving
//     <&zip_temp_layer 3 500>;
// };
//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),,,,,,
        <&zip_xy_scaler 1 3>,
        // make this trackball output scrolling events by default instead of cursor movement,,,,,,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,,,,,,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};
